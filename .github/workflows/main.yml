
name: CI/CD Pipeline with Staging and Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Specify the environment to deploy to (staging or production)'
        required: true
        default: staging

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up JDK
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '17'
  #         distribution: 'oracle'

  #     - name: Build with Maven
  #       run: mvn clean install -DskipTests

  #     - name: Package Maven
  #       run: mvn clean package

  #     - name: check directory
  #       run: ls -al target

  #     - name: Upload JAR artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: built-jar
  #         path: target/*.jar
          
  #     - name: Setup QEMU
  #       id: qemu
  #       uses: docker/setup-qemu-action@v3

  #     - name: Setup Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v3
        
  #     - name: check directory
  #       run: ls -R
        
  #     - name: Docker Login
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
          
  #     - name: Build Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: >
  #           ibrakadijbra13/service-a:latest,
  #           ibrakadijbra13/service-a:${{ github.sha }}
      
           
  deploy_infrastructure:
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    # needs: build
    permissions:
      id-token: write
      contents: read
    env:
      ResourceGroupName: github-devops-test
      ResourceGroupLocation: "eastus"
    steps:
    - uses: actions/checkout@master
    - uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZ_APPID }}
        tenant-id: ${{ secrets.AZ_TENANT }}
        subscription-id: ${{ secrets.AZ_SUB }}
    - uses: Azure/CLI@v2
      with:
        inlineScript: |
          #!/bin/bash
          az group create --name ${{ env.ResourceGroupName }} --location ${{ env.ResourceGroupLocation }}
          echo "Azure resource group created"
    - uses: azure/arm-deploy@v2
      with:
        resourceGroupName: ${{ env.ResourceGroupName }}
        template: ./arm-template.json
        
  deploy_to_kubernetes:
      runs-on: ubuntu-latest
      permissions:
       id-token: write
       contents: read
       actions: read
      env:
        ResourceGroupName: github-devops-test
        ClusterName: myAKSCluster
      # needs: [build, deploy_infrastructure]
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
          
        - uses: azure/setup-kubectl@v4

        - uses: azure/login@v2
          with:
            client-id: ${{ secrets.AZ_APPID }}
            tenant-id: ${{ secrets.AZ_TENANT }}
            subscription-id: ${{ secrets.AZ_SUB }}

         # Set the target AKS cluster.
        - uses: Azure/aks-set-context@v4
          with:
              cluster-name: ${{ env.ClusterName }}
              resource-group:  ${{ env.ResourceGroupName }}

        - uses: Azure/k8s-create-secret@v4
          with:
              container-registry-url: docker.io
              container-registry-username: ${{ secrets.DOCKER_USERNAME }}
              container-registry-password: ${{ secrets.DOCKER_PASSWORD }}
              secret-name: demo-k8s-secret

        - uses: Azure/k8s-deploy@v5
          with:
              action: deploy
              manifests: |
                 manifests
              images: |
                 ibrakadijbra13/service-a:latest
              imagepullsecrets: |
                 demo-k8s-secret
